package lumicode.agendaja.api.resource;

import java.net.URI;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import lumicode.agendaja.api.model.Cliente;
import lumicode.agendaja.api.model.Funcionario;
import lumicode.agendaja.api.repository.FuncionarioRepository;
import lumicode.agendaja.api.utils.ConverterDatas;

@RestController
@RequestMapping("/funcionario")
@CrossOrigin(origins = "*")
public class FuncionarioResource {
	
	@Autowired
	private FuncionarioRepository funcionarioRepository;
	
	@GetMapping
	private List<Funcionario> getFuncionario(){
		return funcionarioRepository.findAll();
	}
	
	@GetMapping("/{id}")
	private Funcionario visualizarFuncionario(@PathVariable Long id) {
		return funcionarioRepository.findById(id).get();
	}
	
	
	
	@PostMapping
	private ResponseEntity<Funcionario> cadastrarFuncionario(
			@Validated @RequestBody Funcionario funcionario,
			HttpServletResponse response){
		//setando no cliente a data en para cadastro
		cliente.setDataNascimento(dataFormatadaEn);
		//setando o criado em 
		cliente.setCriadoEm(converterDatas.dataAtual());
		//setando o atualizado 
		cliente.setAtualizadoEm(converterDatas.dataAtual());
		
		Cliente clienteSalvo = clienteRepository.save(cliente);
		
		//criando o cliente depois de salvo para retornar o json  
		URI uri = ServletUriComponentsBuilder
				  .fromCurrentRequest()
				  .path("/{id}")
				  .buildAndExpand(cliente.getIdCliente())
				  .toUri();
		//colocando no header o localização do cliente que está na uri
		response.addHeader("Location", uri.toASCIIString());

		//o cliente cadastrado ira ser retornado no body da resposta
		return ResponseEntity.created(uri).body(clienteSalvo);
		
	
	}
	
	



	

		
	//atualizando o cliente
	@PutMapping("/{id}")
	private ResponseEntity<?> atualizarCliente(@RequestBody Cliente cliente,
			@PathVariable Long id ){
		
		
		try {
			Cliente clienteAtualizado = clienteRepository.findById(id).get();
			
			
			//declarando o coverter datas 
			ConverterDatas converterDatas = new ConverterDatas();
			//pegando a data em pt do cliente
			String dataBrString = cliente.getDataNascimento();
			//Transformando a string em date
			Date dataBrDate = converterDatas.stringToDateEn(dataBrString);
			//formatando para En
			String dataFormatadaEn = converterDatas.dataEn(dataBrDate);
			//setando no cliente a data en para cadastro
			cliente.setDataNascimento(dataFormatadaEn);
			//setando o atualizada em
			cliente.setAtualizadoEm(converterDatas.dataAtual());
			//para não atualizar o criadoEm estou setando de novo apra nao copiar
			String criadoEm = clienteAtualizado.getCriadoEm();
			cliente.setCriadoEm(criadoEm);
			// *************************
			
			BeanUtils.copyProperties(cliente, clienteAtualizado, "id");
		
			clienteRepository.save(cliente);
			
			return ResponseEntity.ok(clienteAtualizado);
			
		}catch (Exception e) {
			return  new ResponseEntity<String>("{\"mensage\": \"A data de nascimento pode estar errada. Formato aceito: dia/mes/anos\"}",HttpStatus.BAD_REQUEST);
		}
	}

	
	
}
